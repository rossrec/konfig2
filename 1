import os
import subprocess
import sys
import argparse
import graphviz


def get_commits_with_file_hash(repo_path, file_hash):
    """
    Get a list of commits that include the specified file hash.
    """
    os.chdir(repo_path)
    # Get the list of commits that modified the file with the given hash
    command = f"git log --pretty=format:'%H %s' --all --follow -- {file_hash}"
    result = subprocess.run(command, shell=True, capture_output=True, text=True)

    if result.returncode != 0:
        print("Error retrieving commits:", result.stderr)
        sys.exit(1)

    commits = []
    for line in result.stdout.strip().split('\n'):
        if line:
            commit_hash, commit_message = line.split(' ', 1)
            commits.append((commit_hash, commit_message))

    return commits


def build_mermaid_graph(commits):
    """
    Build a Mermaid graph representation from the list of commits.
    """
    graph = "graph TD;\n"
    for commit_hash, commit_message in commits:
        graph += f'    {commit_hash}["{commit_message}"];\n'
        # Here you can add logic to connect commits if needed
    return graph


def save_graph_as_png(graph, output_path):
    """
    Save the Mermaid graph as a PNG file using Graphviz.
    """
    dot = graphviz.Source(graph, format='png')
    dot.render(output_path, cleanup=True)
    print(f"Graph saved as {output_path}.png")


def main():
    parser = argparse.ArgumentParser(description="Visualize Git commit dependencies.")
    parser.add_argument('visualizer_path', help="Path to the graph visualizer.")
    parser.add_argument('repo_path', help="Path to the Git repository.")
    parser.add_argument('output_path', help="Path to save the dependency graph image.")
    parser.add_argument('file_hash', help="File hash to filter commits.")

    args = parser.parse_args()

    commits = get_commits_with_file_hash(args.repo_path, args.file_hash)
    if not commits:
        print("No commits found for the specified file hash.")
        return

    mermaid_graph = build_mermaid_graph(commits)
    save_graph_as_png(mermaid_graph, args.output_path)


if __name__ == "__main__":
    main()
